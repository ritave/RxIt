{"version":3,"file":"transform.js","sourceRoot":"","sources":["../src/transform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Takes an iterator, gathers all upstream values, sorts them and emits them in sorted order.\n *\n * ```text\n * -5--4--7--2-|>\n * sort()\n * ------------2--4--5--7-|>\n * ```\n *\n * @param cmp - Standard array.sort compare function.\n * @returns An iterator with upstream values in sorted order.\n */\nexport const sort = <V>(cmp?: (a: V, b: V) => number) =>\n  function* (it: Iterable<V>) {\n    const acc = [...it];\n    yield* acc.sort(cmp);\n  };\n\n/**\n * Takes an iterator, emits each value mapped using `fn`.\n *\n * ```text\n * -2--3--4-|>\n * map(x => x * 2)\n * -4--6--8-|>\n * ```\n *\n * @param fn - Mapping function.\n * @returns An iterator with each value mapped using `fn`.\n */\nexport const map = <V, R>(fn: (input: V) => R) =>\n  function* (it: Iterable<V>) {\n    for (const el of it) {\n      yield fn(el);\n    }\n  };\n\n/**\n * Takes an iterator and calls a side-effect function on each emitted value.\n *\n * ```text\n * -2--3--4-|>\n * tap(console.log)\n * -2--3--4-|>\n * ```\n *\n * @param effect - Function to call on each emitted value.\n * @returns The same values as the original iterator.\n */\nexport const tap = <A>(effect: (input: A, index: number) => void) =>\n  function* (it: Iterable<A>) {\n    let i = 0;\n    for (const el of it) {\n      effect(el, i);\n      yield el;\n      i += 1;\n    }\n  };\n\n/**\n * Filters out values from upstream and emits only values for which `predicate` holds\n *\n * ```text\n * -2--3--4--5--6-|>\n * filter(x => x % 2 == 0)\n * -2-----4-----6-|>\n * ```\n *\n * @param predicate - The function to filter out emitted values.\n * @returns An iterator returning filtered out values from upstream.\n */\nexport const filter = <A>(predicate: (el: A, index: number) => boolean) =>\n  function* (it: Iterable<A>) {\n    let i = 0;\n    for (const el of it) {\n      if (predicate(el, i)) {\n        yield el;\n      }\n      i += 1;\n    }\n  };\n\n/**\n * Takes up-to `count` elements from the upstream iterator and emits them.\n *\n * ```text\n * -2--3--4--5-|>\n * take(2)\n * -2--3-|>\n * ```\n *\n * @param count - The number of elements to take from the iterator.\n * @returns An iterator with up-to `count` elements.\n */\nexport const take =\n  (count = 1) =>\n  <A>(it: Iterable<A>) =>\n    takeWhile<A>((_, index) => index < count)(it);\n\n/**\n * Takes values from upstream as long as `predicate` holds. After it stops taking, finished immediately.\n *\n * ```text\n * -2--3--4--5-|>\n * takeWhile(x => x < 5)\n * -2--3--4--|>\n * ```\n *\n * @param predicate - A function that should return whether the iterator should still be emiting upstream values.\n * @returns An iterator that emits values as long as `predicate` holds.\n */\nexport const takeWhile = <A>(\n  predicate: (element: A, index: number) => boolean,\n) =>\n  function* (it: Iterable<A>) {\n    let i = 0;\n    for (const el of it) {\n      if (!predicate(el, i)) {\n        return;\n      }\n      yield el;\n      i += 1;\n    }\n  };\n\n/**\n * Skips first `count` elements from the upstream iterator and emits the rest.\n *\n * ```text\n * -2--3--4--5--6-|>\n * skip(2)\n * -------4--5--6-|>\n * ```\n *\n * @param count - The number of elements to skip from the upstream.\n * @returns An iterator with first `count` elements skipped.\n */\nexport const skip =\n  (count = 1) =>\n  <A>(it: Iterable<A>) =>\n    skipWhile<A>((_, index) => index < count)(it);\n\n/**\n * Skips values from upstream as long as `predicate` holds. After it stops holding, returns the rest of the values.\n *\n * ```text\n * -2--3--4--5--6-|>\n * skipWhile(x => x < 5)\n * ----------5--6-|>\n * ```\n *\n * @param predicate - A function that should return whether the iterator should still be skipping values emitted upstream.\n * @returns An iterator that skips first few values from upstream and emits the rest.\n */\nexport const skipWhile = <A>(\n  predicate: (element: A, index: number) => boolean,\n) =>\n  function* (it: Iterable<A>) {\n    let i = 0;\n    let shouldYield = false;\n    for (const el of it) {\n      if (shouldYield) {\n        yield el;\n      } else {\n        shouldYield = !predicate(el, i);\n        if (shouldYield) {\n          yield el;\n        }\n      }\n      i += 1;\n    }\n  };\n\nexport type ReduceFn<A, U> = (acc: U, curr: A) => U;\nconst unused = Symbol('No value was set');\n/**\n * Takes an iterator, reduces it's values using standard semantics of array.reduce and emits a single value.\n *\n * The first accumulator value is the first element from the upstream iterator.\n *\n * ```text\n * -2--3--4-|>\n * reduce((acc, val) => acc + val);\n * ---------10-|>\n * ```\n *\n * @param fn - Standard array.reduce reducer.\n * @returns An iterator with single reduced value.\n */\nexport function reduce<A, U>(\n  fn: ReduceFn<A, U>,\n): (it: Iterable<A>) => Iterable<U>;\n/**\n * Takes an iterator, reduces it's values using standard semantics of array.reduce and emits a single value.\n *\n * ```text\n * -2--3--4-|>\n * reduce((acc, val) => acc + val, 7);\n * ---------17-|>\n * ```\n *\n * @param fn - Standard array.reduce reducer.\n * @param initial - Initial value passed down to `fn` as accumulator.\n * @returns An iterator with single reduced value.\n */\nexport function reduce<A, U>(\n  fn: ReduceFn<A, U>,\n  // Different documentation, and undefined can be passed as a second argument\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  initial: U,\n): (it: Iterable<A>) => Iterable<U>;\n/**\n * Takes an iterator, reduces it's values using standard semantics of array.reduce and emits a single value.\n *\n * @param args - Standard array.reduce arguments.\n * @returns An iterator with single reduced value.\n */\nexport function reduce<A, U>(...args: [ReduceFn<A, U>] | [ReduceFn<A, A>, A]) {\n  const fn: (acc: any, curr: any) => any = args[0];\n  let acc: typeof unused | A | U = args.length === 2 ? args[1] : unused;\n\n  return function* (it: Iterable<A>) {\n    for (const el of it) {\n      if (acc === unused) {\n        acc = el;\n      } else {\n        acc = fn(acc, el);\n      }\n    }\n\n    if (acc !== unused) {\n      yield acc;\n    }\n  };\n}\n\n/**\n * Takes an iterator, gathers all elements into an array and emits that array.\n *\n * ```text\n * -2--3--4--5-|>\n * buffer()\n * ------------[2,3,4,5]--|>\n * ```\n *\n * @returns An iterator with single element array with all upstream values.\n */\nexport const buffer = () =>\n  function* <A>(it: Iterable<A>) {\n    const acc: A[] = [];\n    for (const el of it) {\n      acc.push(el);\n    }\n    yield acc;\n  };\n"]}