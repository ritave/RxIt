{"version":3,"file":"pipe.js","sourceRoot":"","sources":["../src/pipe.ts"],"names":[],"mappings":";;;AA8LA;;;;;;;;;;GAUG;AACH,SAAgB,IAAI,CAAC,CAAM,EAAE,GAAG,GAAmB;IACjD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvC,CAAC;AAFD,oBAEC","sourcesContent":["// TypeScript language server doesn't like more complicate solutions.\n// It just bails out and errors out. So we use a very simple typing\ntype Op<P, R> = (input: P) => R;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A>(a: A): A;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B>(a: A, b: Op<A, B>): B;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\\\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C>(a: A, b: Op<A, B>, c: Op<B, C>): C;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>\n): D;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D, E>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>,\n  e: Op<D, E>\n): E;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D, E, F>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>,\n  e: Op<D, E>,\n  f: Op<E, F>\n): F;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D, E, F, G>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>,\n  e: Op<D, E>,\n  f: Op<E, F>,\n  g: Op<F, G>\n): G;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D, E, F, G, H>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>,\n  e: Op<D, E>,\n  f: Op<E, F>,\n  g: Op<F, G>,\n  h: Op<G, H>\n): H;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D, E, F, G, H, I>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>,\n  e: Op<D, E>,\n  f: Op<E, F>,\n  g: Op<F, G>,\n  h: Op<G, H>,\n  i: Op<H, I>\n): I;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe<A, B, C, D, E, F, G, H, I, J>(\n  a: A,\n  b: Op<A, B>,\n  c: Op<B, C>,\n  d: Op<C, D>,\n  e: Op<D, E>,\n  f: Op<E, F>,\n  g: Op<F, G>,\n  h: Op<G, H>,\n  i: Op<H, I>,\n  j: Op<I, J>\n): J;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe(a: any, ...fns: Op<any, any>[]): any;\n/**\n * Takes the first element and passes if through a list of operator functions.\n *\n * ```\n * pipe(a, fn_1, fn_2, fn_3) === fn_3(fn_2(fn_1(a)))\n * ```\n *\n * @param a - The argument to pass down.\n * @param fns - The list of functions.\n * @returns The result of the last function call.\n */\nexport function pipe(a: any, ...fns: Op<any, any>[]): any {\n  return fns.reduce((x, f) => f(x), a);\n}\n"]}